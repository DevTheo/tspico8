// deno-lint-ignore-file no-explicit-any
/** @noSelfInFile **/

// Audio
declare function music(
  n?: number,
  fade_len?: number,
  channel_mask?: number,
): void
declare function sfx(
  n: number,
  channel?: number,
  offset?: number,
  length?: number,
): void

// Cart Data
declare function cartdata(id: string): void;
declare function dget(idx: number): number;
declare function dset(idx: number, val: number): void 

// Coroutines
declare type Coroutine = () => any;
declare function cocreate(func: () => any): Coroutine
declare function cocreate(cor: Coroutine, ...args: Array<any>): any
declare function costatus (cor: Coroutine): string
declare function yield(...args: Array<any>): void

// Graphics
declare function camera(): void
declare function camera(x: number, y: number): void
declare function circ(x: number, y: number, r: number, col?: number): void
declare function circfill(x: number, y: number, r: number, col?: number): void
declare function clip(): void
declare function clip(
  x: number,
  y: number,
  w: number,
  h: number,
  clip_previous?: boolean,
): void
declare function cls(col?: number): void
declare function color(col: number): void
declare function cursor(x: number, y: number, col?: number): void
declare function fget(n: number, f?: number): number
declare function flip(): void
declare function fset(n: number, f: number, v?: boolean): void
declare function line(x0: number, y0: number): void
declare function line(
  x0: number,
  y0: number,
  x1: number,
  y1: number,
  col?: number,
): void
declare function pal(c0: number, c1: number, p?: number): void
declare function palt(col: number, t: boolean): void
declare function pget(x: number, y: number): number
declare function print(str: string): void
declare function print(str: string, x: number, y: number, col?: number): void
declare function pset(x: number, y: number, col?: number): void
declare function rect(
  x0: number,
  y0: number,
  x1: number,
  y1: number,
  col?: number,
): void
declare function rectfill(
  x0: number,
  y0: number,
  x1: number,
  y1: number,
  col?: number,
): void
declare function sget(x: number, y: number): number
declare function spr(n: number, x: number, y: number): void
declare function spr(
  n: number,
  x: number,
  y: number,
  w: number,
  h: number,
): void
declare function spr(
  n: number,
  x: number,
  y: number,
  w: number,
  h: number,
  flip_x: boolean,
  flip_y: boolean,
): void
declare function sset(x: number, y: number, col: number): void
declare function sspr(
  sx: number,
  sy: number,
  sw: number,
  sh: number,
  dx: number,
  dy: number,
): void
declare function sspr(
  sx: number,
  sy: number,
  sw: number,
  sh: number,
  dx: number,
  dy: number,
  dw: number,
  dh: number,
  flip_x?: boolean,
  flip_y?: boolean,
): void
declare function fillp(mask: number): void
declare function tline(
  x0:number, 
  y0:number, 
  x1: number, 
  y1:number,
  mx?: number,
  my?: number): void

// input
declare function btn(i: number, p?: number): boolean
declare function btnp(i: number, p?: number): boolean

// Map
declare function map(
  cel_x: number,
  cel_y: number,
  sx: number,
  sy: number,
  cel_w: number,
  cel_h: number,
  layer?: number,
): void
// Deprecated
/*
declare function mapdraw(
  cel_x: number,
  cel_y: number,
  sx: number,
  sy: number,
  cel_w: number,
  cel_h: number,
  layer?: number,
): void */
declare function mget(x: number, y: number): void
declare function mset(x: number, y: number, v?: number): void

// Math
declare function abs(x: number): number
declare function atan2(dx: number, dy: number): number
declare function ceil(x: number): number
declare function cos(x: number): number
declare function flr(x: number): number
declare function max(x: number, y: number): number
declare function mid(x: number, y: number, z: number): number
declare function min(x: number, y: number): number
declare function rnd(x: number): number
declare function sgn(x: number): number
declare function sin(x: number): number
declare function sqrt(x: number): number
declare function srand(x: number): number

// Memory
declare function cstore(
  dest_addr: number, 
  src_addr: number, 
  len: number, 
  filename?: string): void
declare function reload(
  dest_addr: number, 
  src_addr: number, 
  len: number, 
  filename?: string): void
declare function memcpy(
  dest_addr: number, 
  src_addr: number, 
  len: number): void
declare function memset(
  dest_addr: number, 
  val: number, 
  len: number): void
declare function peek(addr: number): number
declare function poke(addr: number, val: number): void
declare function serial(channel: number, addr: number, val: number): void

// debugging
declare function assert(cond: boolean, message?: string): void;
declare function printh(
  str: string,
  filename?: string,
  overwrite?: boolean,
  save_to_desktop?: boolean,
): void
declare function stat(x: number): void
declare function stop(
  message?: string): void;
declare function stop(
  message: string,
  x: number,
  y: number,
  col?: number  ): void;
declare function trace(): string
declare function trace(
  cor: Coroutine): string
declare function trace(
  cor: Coroutine,
  message?: string, 
  skip?: number): string

// Shell
declare function menuitem(index: number): void
declare function menuitem(
  index: number, 
  label: string, 
  callback: () => void): void
declare function type(v: any): string
declare function time(): number
declare function t(): number

// String 
declare function sub(str: string, from: number, to?: number): string
declare function tostr(val: any, hex?: boolean): string
declare function tonum(str: string): number
declare function chr(num: number): string
declare function ord(str: string): number
declare function split(
  str: string, 
  separator: string, 
  convert_numbers: boolean): string

// Lua
declare function select(idx: number, ...arr:Array<any>): Array<any> 

// Tables (advanced)
declare function rawset(tbl: any, key: string | number, value: any ): void
declare function rawget(tbl: any, key: string | number): any
declare function rawequal(t1: any, t2: any): boolean
declare function rawlen(t: any): number
declare function getmetatable(t: any): any
declare function setmetatable(t: any, mt: any): any

// Tables
declare function add(t: any, v: any, index?: number): void
declare function all(t: any): void
declare function count(t: any, v?: any[]): number
declare function del(t: any, v?: any): void
declare function deli(t: any, i?: any[]): void
declare function foreach(t: any, f: (item: any) => void): void
declare function ipairs(t: any): any[]
declare function pack(...args: any): any
declare function pairs(t: any): any[]
declare function unpack(tbl: any, i?: number, j?: number): any 
declare function next(tbl: any, key?: any): any[]
