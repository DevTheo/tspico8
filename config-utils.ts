import {path} from "./deps.ts";
import { readFileSync } from "./file-utils.ts";
  

export type TsPico8Config = {
    // Set this if tspico8 can't find your pico-8 install automatically
    pico8?: { executable?: string },
    // compression of files (currently unavailable)
    compression?: { 
        compressedFile: string ,
        indentLevel?: number,
        compress?: boolean,
        mangle?: boolean
    },
    // Configure mangling (currently unavailable)
    // See: https://github.com/mishoo/UglifyJS#mangle-options
    mangleOptions?: {
        toplevel?: boolean,
        reserved?: string[] // "_init", "_update", "_draw"
    },
    // Configure compression (currently unavailable)
    // See: https://github.com/mishoo/UglifyJS#compress-options
    compressOptions?: {
        dead_code?: boolean,
        conditionals?: boolean,
        comparisons?: boolean,
        evaluate?: boolean,
        booleans?: boolean,
        loops?: boolean,
        unused?: boolean,
        join_vars?: boolean
    }
}

const defaultTsPico8Config = {
    // Set this if tspico8 can't find your pico-8 install automatically
    pico8: {
    },
    compression: { 
      compressedFile: "build/compressed.js",
      indentLevel: 1,
      compress: false, // enable compression
      mangle: false // enable mangling (shortens variable names)
    },
    // Configure mangling
    // See: https://github.com/mishoo/UglifyJS#mangle-options
    mangleOptions: {
      toplevel: true,
      reserved: ["_init", "_update", "_draw"]
    },
    // Configure compression
    // See: https://github.com/mishoo/UglifyJS#compress-options
    compressOptions: {
      dead_code: true,
      conditionals: false,
      comparisons: true,
      evaluate: true,
      booleans: true,
      loops: true,
      unused: true,
      join_vars: true
    }
  } as TsPico8Config

// Location of the TypeScript config file
// deno-lint-ignore no-explicit-any
export const getTSConfig = (workDir: string): any => {
    const tsConfigPath = path.join(workDir, "tsconfig.json");
   
    return JSON.parse(readFileSync(tsConfigPath));
}

// Location of the transpiler config file
export const getTSPicoConfig = (workDir: string): TsPico8Config => {
    const tsConfigPath = path.join(workDir, "tspico8.json");
    const tsPico9Cfg = JSON.parse(readFileSync(tsConfigPath)) as TsPico8Config;

    return {...defaultTsPico8Config, ...tsPico9Cfg} as TsPico8Config;
}


// Location of the output generated by TypeScript (tsc)
export const getOutfile = (workDir: string): string => {
    const tsConfig = getTSConfig(workDir);
    return path.join(workDir, tsConfig.compilerOptions.outFile);
}
  
  // Location of the output file after compression (uglified)
export const getOutfileCompressed = (workDir: string): string => {
    const picoConfig = getTSPicoConfig(workDir);
    return path.join(workDir, picoConfig.compression!.compressedFile);
}
